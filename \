import asyncio
import os
from time import sleep
import psutil
import pytest
from performance_tests.conftest import create_one_of_each

num_items = 0


async def monitor_process_usage(process: psutil.Process):
    global num_items
    log_file_name = f"process_usage_{num_items}_items.log"
    try:
        with open(log_file_name, "a") as log_file:
            while True:
                try:
                    cpu_usage = process.cpu_percent(interval=None) / psutil.cpu_count()
                    memory_usage = process.memory_percent()
                    log_file.write(
                        f"CPU Usage: {cpu_usage:.2f}%, Memory Usage: {memory_usage:.2f}%\n"
                    )
                    log_file.flush()
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    break
                await asyncio.sleep(1)
    except asyncio.CancelledError:
        pass


async def start_subprocess(command: list[str]):
    process = await asyncio.create_subprocess_exec(
        *command, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )
    psutil_process = psutil.Process(process.pid)

    psutil_process.cpu_percent(interval=None)
    return process, psutil_process


async def run_pytest():
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, pytest.main, ["-s", "./"])


async def main():
    global num_items

    subprocess_command = [
        "java",
        "-jar",
        "../../../Application_Being_Tested/runTodoManagerRestAPI-1.5.5.jar",
    ]  # Update as needed
    process, psutil_process = await start_subprocess(subprocess_command)

    monitor_task = asyncio.create_task(monitor_process_usage(psutil_process))

    item_counts = [100]
    for items_to_add in item_counts:
        num_items += items_to_add

        for _ in range(items_to_add):
            create_one_of_each()

        await run_pytest()

    # Ensure the process is still running before trying to kill it
    if psutil_process.is_running():
        print("run")
        try:
            process.kill()  # Attempt to kill the process
        except psutil.NoSuchProcess:
            print("Process already terminated.")
        except psutil.AccessDenied:
            print("Access denied when trying to kill the process.")
    else:
        print("hi")

    monitor_task.cancel()
    await monitor_task


if __name__ == "__main__":
    asyncio.run(main())
